{"ast":null,"code":"var _jsxFileName = \"/Users/atheer/Desktop/Devteams/frontend/src/components/Projects/ProjectCRUD/UpdateProject/index.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-use-before-define */\nimport { useNavigate, useParams } from \"react-router\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport { toast } from \"react-toastify\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UpdateProject(_ref) {\n  _s();\n\n  let {\n    projects,\n    updateProject,\n    dark\n  } = _ref;\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [level, setLevel] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const currentProject = projects.find(project => project.id === parseInt(id));\n  useEffect(() => {\n    setTeamNeeded(currentProject.teamNeeded);\n    setLocation(currentProject.location);\n    setLevel(currentProject.level);\n    setName(currentProject.name);\n    setType(currentProject.type);\n    setDesc(currentProject.desc);\n  }, [currentProject]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter(project => project.name === name && project.id !== currentProject.id ? project : null);\n\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n\n    const data = {\n      id: currentProject.id,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type\n    };\n    updateProject(data);\n    toast.success(\"Project updated successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      sx: {\n        paddingTop: \"45px\",\n        paddingBottom: \"83px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginTop: 8,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            color: props.dark ? \"#00468B\" : \"white\",\n            fontFamily: \"Comfortaa\",\n            fontWeight: \"800\",\n            fontSize: \"40px\",\n            marginBottom: \"30px\"\n          },\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Update Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: 500,\n            maxWidth: \"100%\"\n          },\n          onSubmit: e => {\n            if (isEmpty) {\n              e.preventDefault();\n              setIsEmpty(true);\n              setIsError(true);\n            } else {\n              setIsEmpty(false);\n            }\n          },\n          children: currentProject ? /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: name,\n                  variant: \"filled\",\n                  fullWidth: true,\n                  label: \"Project name\",\n                  error: isError,\n                  required: true,\n                  autoFocus: true,\n                  onChange: e => {\n                    setName(e.target.value);\n\n                    if (name.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  },\n                  sx: {\n                    bgcolor: dark ? \"transparent\" : \"white\",\n                    borderRadius: 1\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  variant: \"filled\",\n                  value: desc,\n                  fullWidth: true,\n                  label: \"Project idea\",\n                  error: isError,\n                  required: true,\n                  onChange: e => {\n                    setDesc(e.target.value);\n\n                    if (desc.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  },\n                  sx: {\n                    bgcolor: dark ? \"transparent\" : \"white\",\n                    borderRadius: 1\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: type,\n                  options: projectsType,\n                  onChange: (event, newValue) => {\n                    setType(newValue);\n                  },\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Project type\",\n                    variant: \"filled\",\n                    sx: {\n                      bgcolor: dark ? \"transparent\" : \"white\",\n                      borderRadius: 1\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: location,\n                  options: cities,\n                  onChange: (event, newValue) => {\n                    setLocation(newValue);\n                  },\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Where are from\",\n                    variant: \"filled\",\n                    sx: {\n                      bgcolor: dark ? \"transparent\" : \"white\",\n                      borderRadius: 1\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: teamNeeded,\n                  options: projectsTeam,\n                  onChange: (event, newValue) => {\n                    setTeamNeeded(newValue);\n                  },\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Number of teammates\",\n                    variant: \"filled\",\n                    sx: {\n                      bgcolor: dark ? \"transparent\" : \"white\",\n                      borderRadius: 1\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: level,\n                  options: projectsLevel,\n                  onChange: (event, newValue) => {\n                    setLevel(newValue);\n                  },\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Level of your project\",\n                    variant: \"filled\",\n                    sx: {\n                      bgcolor: dark ? \"transparent\" : \"white\",\n                      borderRadius: 1\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group d-flex align-items-center justify-content-between my-2\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                onClick: () => navigate(\"/myprojects\"),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center\",\n            children: \"No Project Found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(UpdateProject, \"AOGEn/w4eqwsQPh0y33JAQn2f5A=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = UpdateProject;\n;\n\nconst mapStateToProps = state => ({\n  projects: state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateProject: data => {\n    dispatch({\n      type: \"UPDATE_PROJECT\",\n      payload: data\n    });\n  }\n});\n\nconst cities = [\"Riyadh\", \"Jeddah\", \"Mecca\", \"Medina\", \"Ad Dammam\", \"Al Hufuf\", \"Buraydah\", \"Al Hillah\", \"At Taif\", \"Tabuk\", \"Khamis Mushayt\", \"Hail\", \"Al Qatif\", \"Al Mubarraz\", \"Al Kharj\", \"Najran\", \"Yanbu‘\", \"Abha\", \"Arar\", \"Jazan\", \"Sakaka\", \"Al Bahah\"];\nconst projectsType = [\"Web Application\", \"Android Application\", \"IOS Application\", \"Security System\", \"UI\", \"UX\"];\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProject);\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProject\");","map":{"version":3,"sources":["/Users/atheer/Desktop/Devteams/frontend/src/components/Projects/ProjectCRUD/UpdateProject/index.js"],"names":["useNavigate","useParams","React","useEffect","useState","connect","Autocomplete","Typography","TextField","Container","Button","toast","Grid","Box","UpdateProject","projects","updateProject","dark","teamNeeded","setTeamNeeded","isError","setIsError","location","setLocation","isEmpty","setIsEmpty","level","setLevel","name","setName","type","setType","desc","setDesc","navigate","id","currentProject","find","project","parseInt","handleSubmit","e","preventDefault","checkProjectNameExists","filter","warning","length","error","data","success","paddingTop","paddingBottom","marginTop","display","flexDirection","alignItems","color","props","fontFamily","fontWeight","fontSize","marginBottom","width","maxWidth","target","value","bgcolor","borderRadius","projectsType","event","newValue","params","cities","projectsTeam","projectsLevel","maxHeight","minWidth","minHeight","mt","mb","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport { useNavigate, useParams } from \"react-router\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport { toast } from \"react-toastify\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\n\nfunction UpdateProject ({ projects, updateProject, dark }) {\n\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [level, setLevel] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  const currentProject = projects.find(\n    (project) => project.id === parseInt(id)\n  );\n\n  useEffect(() => {\n    setTeamNeeded(currentProject.teamNeeded);\n    setLocation(currentProject.location);\n    setLevel(currentProject.level);\n    setName(currentProject.name);\n    setType(currentProject.type);\n    setDesc(currentProject.desc);\n  }, [currentProject]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter((project) =>\n      project.name === name && project.id !== currentProject.id ? project : null\n    );\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n    const data = {\n      id: currentProject.id,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type,\n    };\n    updateProject(data);\n    toast.success(\"Project updated successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return (\n    <>\n      <Container component=\"main\" maxWidth=\"xs\" sx={{paddingTop: \"45px\", paddingBottom: \"83px\"}}>\n        <Box sx={{marginTop: 8, display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n          <Typography\n            sx={{color: props.dark ? \"#00468B\" : \"white\",fontFamily: \"Comfortaa\", fontWeight: \"800\", fontSize: \"40px\", marginBottom: \"30px\"}} component=\"h1\" variant=\"h5\">\n            Update Project\n          </Typography>\n          <Box sx={{width: 500, maxWidth: \"100%\"}}\n            onSubmit={(e) => {\n              if (isEmpty) {\n                e.preventDefault();\n                setIsEmpty(true);\n                setIsError(true);\n              } else {\n                setIsEmpty(false);\n              }\n            }}>\n            {currentProject ? (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      value={name} variant=\"filled\" fullWidth label=\"Project name\" error={isError} required autoFocus\n                      onChange={(e) => {\n                        setName(e.target.value);\n                        if (name.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                      sx={{ bgcolor: dark ? \"transparent\" : \"white\", borderRadius: 1}}> \n                    </TextField>\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      variant=\"filled\" value={desc} fullWidth label=\"Project idea\" error={isError} required\n                      onChange={(e) => {\n                        setDesc(e.target.value);\n                        if (desc.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                      sx={{ bgcolor: dark ? \"transparent\" : \"white\", borderRadius: 1}}>\n                    </TextField>\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={type} options={projectsType}\n                      onChange={(event, newValue) => {\n                        setType(newValue);\n                      }}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Project type\" variant=\"filled\" sx={{ bgcolor: dark ? \"transparent\" : \"white\", borderRadius: 1}} />\n                      )}>\n                    </Autocomplete>\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={location} options={cities}\n                      onChange={(event, newValue) => {\n                        setLocation(newValue);\n                      }}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Where are from\" variant=\"filled\" sx={{ bgcolor: dark ? \"transparent\" : \"white\", borderRadius: 1}} />\n                      )}>\n                    </Autocomplete>\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={teamNeeded} options={projectsTeam}\n                      onChange={(event, newValue) => {\n                        setTeamNeeded(newValue);\n                      }}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Number of teammates\" variant=\"filled\" sx={{ bgcolor: dark ? \"transparent\" : \"white\", borderRadius: 1}} />\n                      )}>\n                    </Autocomplete>\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={level} options={projectsLevel}\n                      onChange={(event, newValue) => {\n                        setLevel(newValue);\n                      }}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Level of your project\" variant=\"filled\" sx={{ bgcolor: dark ? \"transparent\" : \"white\", borderRadius: 1}} />\n                      )}>\n                    </Autocomplete>\n                  </Grid>\n                </Grid>\n                <div className=\"form-group d-flex align-items-center justify-content-between my-2\">\n                  <Button type=\"submit\" variant=\"contained\" sx={{ \":hover\": { bgcolor: \"#e4a300\" }, maxWidth: \"180px\", maxHeight: \"30px\", minWidth: \"180px\", minHeight: \"30px\", mt: 3, mb: 2, backgroundColor: \"#FFB703\"}}>\n                    Update\n                  </Button>\n                  <Button type=\"submit\" variant=\"contained\" sx={{ \":hover\": { bgcolor: \"#e4a300\"}, maxWidth: \"180px\", maxHeight: \"30px\", minWidth: \"180px\", minHeight: \"30px\", mt: 3, mb: 2, backgroundColor: \"#FFB703\"}} onClick={() => navigate(\"/myprojects\")}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            ) : (<h1 className=\"text-center\">No Project Found</h1>)}\n          </Box>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  projects: state,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateProject: (data) => {\n    dispatch({ type: \"UPDATE_PROJECT\", payload: data });\n  },\n});\n\nconst cities = [\"Riyadh\", \"Jeddah\", \"Mecca\", \"Medina\", \"Ad Dammam\", \"Al Hufuf\", \"Buraydah\", \"Al Hillah\", \"At Taif\", \"Tabuk\", \"Khamis Mushayt\", \"Hail\", \"Al Qatif\", \"Al Mubarraz\", \"Al Kharj\", \"Najran\", \"Yanbu‘\", \"Abha\", \"Arar\", \"Jazan\", \"Sakaka\", \"Al Bahah\"];\nconst projectsType = [\"Web Application\", \"Android Application\", \"IOS Application\", \"Security System\", \"UI\", \"UX\"];\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProject);\n"]},"metadata":{},"sourceType":"module"}