{"ast":null,"code":"var _jsxFileName = \"/Users/atheer/Desktop/Devteams/frontend/src/components/Projects/ProjectCRUD/UpdateProject/index.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-use-before-define */\nimport { useNavigate, useParams } from \"react-router\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport { toast } from \"react-toastify\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UpdateProject(_ref) {\n  _s();\n\n  let {\n    projects,\n    updateProject\n  } = _ref;\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [level, setLevel] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    setTeamNeeded(currentProject.teamNeeded);\n    setLocation(currentProject.location);\n    setLevel(currentProject.level);\n    setName(currentProject.name);\n    setType(currentProject.type);\n    setDesc(currentProject.desc);\n  }, [currentProject]);\n  const currentProject = projects.find(project => project.id === parseInt(id));\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter(project => project.name === name && project.id !== currentProject.id ? project : null);\n\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n\n    const data = {\n      id: currentProject.id,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type\n    };\n    updateProject(data);\n    toast.success(\"Project updated successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      sx: {\n        paddingTop: \"45px\",\n        paddingBottom: \"83px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginTop: 8,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontFamily: \"Comfortaa\",\n            color: \"#00468B\",\n            fontWeight: \"800\",\n            fontSize: \"40px\",\n            marginBottom: \"30px\"\n          },\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Update Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          onSubmit: e => {\n            if (isEmpty) {\n              e.preventDefault();\n              setIsEmpty(true);\n              setIsError(true);\n            } else {\n              setIsEmpty(false);\n            }\n          },\n          sx: {\n            width: 500,\n            maxWidth: \"100%\"\n          },\n          children: currentProject ? /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: name,\n                  variant: \"filled\",\n                  fullWidth: true,\n                  label: \"Project name\",\n                  error: isError,\n                  required: true,\n                  autoFocus: true,\n                  onChange: e => {\n                    setName(e.target.value);\n\n                    if (name.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  variant: \"filled\",\n                  value: desc,\n                  fullWidth: true,\n                  label: \"Project idea\",\n                  error: isError,\n                  required: true,\n                  onChange: e => {\n                    setDesc(e.target.value);\n\n                    if (desc.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: type,\n                  onChange: (event, newValue) => {\n                    setType(newValue);\n                  },\n                  options: projectsType,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Project type\",\n                    variant: \"filled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: location,\n                  onChange: (event, newValue) => {\n                    setLocation(newValue);\n                  },\n                  options: cities,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Where are from\",\n                    variant: \"filled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: teamNeeded,\n                  onChange: (event, newValue) => {\n                    setTeamNeeded(newValue);\n                  },\n                  options: projectsTeam,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Number of teammates\",\n                    variant: \"filled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: level,\n                  onChange: (event, newValue) => {\n                    setLevel(newValue);\n                  },\n                  options: projectsLevel,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Level of your project\",\n                    variant: \"filled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 202,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group d-flex align-items-center justify-content-between my-2\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                onClick: () => navigate(\"/myprojects\"),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center\",\n            children: \"No Project Found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(UpdateProject, \"AOGEn/w4eqwsQPh0y33JAQn2f5A=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = UpdateProject;\n;\n\nconst mapStateToProps = state => ({\n  projects: state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateProject: data => {\n    dispatch({\n      type: \"UPDATE_PROJECT\",\n      payload: data\n    });\n  }\n});\n\nconst cities = [\"Riyadh\", \"Jeddah\", \"Mecca\", \"Medina\", \"Ad Dammam\", \"Al Hufuf\", \"Buraydah\", \"Al Hillah\", \"At Taif\", \"Tabuk\", \"Khamis Mushayt\", \"Hail\", \"Al Qatif\", \"Al Mubarraz\", \"Al Kharj\", \"Najran\", \"Yanbu‘\", \"Abha\", \"Arar\", \"Jazan\", \"Sakaka\", \"Al Bahah\"];\nconst projectsType = [\"Web Application\", \"Android Application\", \"IOS Application\", \"Security System\", \"UI\", \"UX\"];\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProject);\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProject\");","map":{"version":3,"sources":["/Users/atheer/Desktop/Devteams/frontend/src/components/Projects/ProjectCRUD/UpdateProject/index.js"],"names":["useNavigate","useParams","React","useEffect","useState","connect","Autocomplete","Typography","TextField","Container","Button","toast","Grid","Box","UpdateProject","projects","updateProject","teamNeeded","setTeamNeeded","isError","setIsError","location","setLocation","isEmpty","setIsEmpty","level","setLevel","name","setName","type","setType","desc","setDesc","navigate","id","currentProject","find","project","parseInt","handleSubmit","e","preventDefault","checkProjectNameExists","filter","warning","length","error","data","success","paddingTop","paddingBottom","marginTop","display","flexDirection","alignItems","fontFamily","color","fontWeight","fontSize","marginBottom","width","maxWidth","target","value","event","newValue","projectsType","params","cities","projectsTeam","projectsLevel","bgcolor","maxHeight","minWidth","minHeight","mt","mb","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport { useNavigate, useParams } from \"react-router\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport { toast } from \"react-toastify\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\n\nfunction UpdateProject ({ projects, updateProject }) {\n\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [level, setLevel] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  useEffect(() => {\n    setTeamNeeded(currentProject.teamNeeded);\n    setLocation(currentProject.location);\n    setLevel(currentProject.level);\n    setName(currentProject.name);\n    setType(currentProject.type);\n    setDesc(currentProject.desc);\n  }, [currentProject]);\n\n  const currentProject = projects.find(\n    (project) => project.id === parseInt(id)\n  );\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter((project) =>\n      project.name === name && project.id !== currentProject.id ? project : null\n    );\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n    const data = {\n      id: currentProject.id,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type,\n    };\n    updateProject(data);\n    toast.success(\"Project updated successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return (\n    <>\n      <Container\n        component=\"main\"\n        maxWidth=\"xs\"\n        sx={{ paddingTop: \"45px\", paddingBottom: \"83px\" }}\n      >\n        <Box\n          sx={{\n            marginTop: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography\n            sx={{\n              fontFamily: \"Comfortaa\",\n              color: \"#00468B\",\n              fontWeight: \"800\",\n              fontSize: \"40px\",\n              marginBottom: \"30px\",\n            }}\n            component=\"h1\"\n            variant=\"h5\"\n          >\n            Update Project\n          </Typography>\n          <Box\n            onSubmit={(e) => {\n              if (isEmpty) {\n                e.preventDefault();\n                setIsEmpty(true);\n                setIsError(true);\n              } else {\n                setIsEmpty(false);\n              }\n            }}\n            sx={{\n              width: 500,\n              maxWidth: \"100%\",\n            }}\n          >\n            {currentProject ? (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      value={name}\n                      variant=\"filled\"\n                      fullWidth\n                      label=\"Project name\"\n                      error={isError}\n                      required\n                      autoFocus\n                      onChange={(e) => {\n                        setName(e.target.value);\n                        if (name.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      variant=\"filled\"\n                      value={desc}\n                      fullWidth\n                      label=\"Project idea\"\n                      error={isError}\n                      required\n                      onChange={(e) => {\n                        setDesc(e.target.value);\n                        if (desc.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={type}\n                      onChange={(event, newValue) => {\n                        setType(newValue);\n                      }}\n                      options={projectsType}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          label=\"Project type\"\n                          variant=\"filled\"\n                        />\n                      )}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={location}\n                      onChange={(event, newValue) => {\n                        setLocation(newValue);\n                      }}\n                      options={cities}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          label=\"Where are from\"\n                          variant=\"filled\"\n                        />\n                      )}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={teamNeeded}\n                      onChange={(event, newValue) => {\n                        setTeamNeeded(newValue);\n                      }}\n                      options={projectsTeam}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          label=\"Number of teammates\"\n                          variant=\"filled\"\n                        />\n                      )}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <Autocomplete\n                      value={level}\n                      onChange={(event, newValue) => {\n                        setLevel(newValue);\n                      }}\n                      options={projectsLevel}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          label=\"Level of your project\"\n                          variant=\"filled\"\n                        />\n                      )}\n                    />\n                  </Grid>\n                </Grid>\n                <div className=\"form-group d-flex align-items-center justify-content-between my-2\">\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{\n                      \":hover\": {\n                        bgcolor: \"#e4a300\",\n                      },\n                      maxWidth: \"180px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"180px\",\n                      minHeight: \"30px\",\n\n                      mt: 3,\n                      mb: 2,\n                      backgroundColor: \"#FFB703\",\n                    }}\n                  >\n                    Update\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{\n                      \":hover\": {\n                        bgcolor: \"#e4a300\",\n                      },\n                      maxWidth: \"180px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"180px\",\n                      minHeight: \"30px\",\n                      mt: 3, mb: 2, backgroundColor: \"#FFB703\"}}\n                    onClick={() => navigate(\"/myprojects\")}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            ) : (<h1 className=\"text-center\">No Project Found</h1>)}\n          </Box>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  projects: state,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateProject: (data) => {\n    dispatch({ type: \"UPDATE_PROJECT\", payload: data });\n  },\n});\n\nconst cities = [\"Riyadh\", \"Jeddah\", \"Mecca\", \"Medina\", \"Ad Dammam\", \"Al Hufuf\", \"Buraydah\", \"Al Hillah\", \"At Taif\", \"Tabuk\", \"Khamis Mushayt\", \"Hail\", \"Al Qatif\", \"Al Mubarraz\", \"Al Kharj\", \"Najran\", \"Yanbu‘\", \"Abha\", \"Arar\", \"Jazan\", \"Sakaka\", \"Al Bahah\"];\nconst projectsType = [\"Web Application\", \"Android Application\", \"IOS Application\", \"Security System\", \"UI\", \"UX\"];\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProject);\n"]},"metadata":{},"sourceType":"module"}