{"ast":null,"code":"var _jsxFileName = \"/Users/atheer/Desktop/Devteams/frontend/src/components/Projects/ProjectCRUD/AddProject/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useNavigate } from \"react-router\";\nimport { toast } from \"react-toastify\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddProject = (_ref, props) => {\n  _s();\n\n  let {\n    projects,\n    addProject\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    console.log(props.dark);\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter(project => project.name === name ? project : null);\n\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n\n    const data = {\n      id: projects.length > 0 ? projects[projects.length - 1].id + 1 : 0,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type\n    };\n    addProject(data);\n    toast.success(\"Your Request sent successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      sx: {\n        paddingTop: \"40px\",\n        paddingBottom: \"100px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginTop: 8,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontFamily: \"Comfortaa\",\n            // color: props.dark ? \"#00468B\" : \"white\",\n            color: \"#00468B\",\n            fontWeight: \"800\",\n            fontSize: \"40px\",\n            marginBottom: \"30px\"\n          },\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Add Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          onSubmit: e => {\n            if (isEmpty) {\n              e.preventDefault();\n              setIsEmpty(true);\n              setIsError(true);\n            } else {\n              setIsEmpty(false);\n            }\n          },\n          sx: {\n            width: 500,\n            maxWidth: \"100%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  variant: \"filled\",\n                  fullWidth: true,\n                  label: \"Project name\",\n                  error: isError,\n                  required: true,\n                  autoFocus: true,\n                  onChange: e => {\n                    setName(e.target.value);\n\n                    if (name.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  variant: \"filled\",\n                  fullWidth: true,\n                  label: \"Project idea\",\n                  error: isError,\n                  required: true,\n                  onChange: e => {\n                    setDesc(e.target.value);\n\n                    if (desc.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: type,\n                  onChange: (event, newValue) => {\n                    setType(newValue);\n                  },\n                  options: projectsType,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Project type\",\n                    variant: \"filled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: location,\n                  onChange: (event, newValue) => {\n                    setLocation(newValue);\n                  },\n                  options: cities,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Where are from\",\n                    variant: \"filled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  disablePortal: true,\n                  value: teamNeeded,\n                  onChange: (event, newValue) => {\n                    setTeamNeeded(newValue);\n                  },\n                  options: projectsTeam,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Number of teammates\",\n                    variant: \"filled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: level,\n                  onChange: (event, newValue) => {\n                    setLevel(newValue);\n                  },\n                  options: projectsLevel,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Level of your project\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group d-flex align-items-center justify-content-between my-2\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                onClick: () => navigate(\"/myprojects\"),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(AddProject, \"X5V0rM7TYUXOWYoHHIrpzrkWCBA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AddProject;\n\nconst mapStateToProps = state => ({\n  projects: state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addProject: data => {\n    dispatch({\n      type: \"ADD_PROJECT\",\n      payload: data\n    });\n  }\n});\n\nconst projectsType = [\"Web Application\", \"Android Application\", \"IOS Application\", \"Security System\", \"UI\", \"UX\"];\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\nconst cities = [\"Riyadh\", \"Jeddah\", \"Mecca\", \"Medina\", \"Ad Dammam\", \"Al Hufuf\", \"Buraydah\", \"Al Hillah\", \"At Taif\", \"Tabuk\", \"Khamis Mushayt\", \"Hail\", \"Al Qatif\", \"Al Mubarraz\", \"Al Kharj\", \"Najran\", \"Yanbu‘\", \"Abha\", \"Arar\", \"Jazan\", \"Sakaka\", \"Al Bahah\"];\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProject);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProject\");","map":{"version":3,"sources":["/Users/atheer/Desktop/Devteams/frontend/src/components/Projects/ProjectCRUD/AddProject/index.js"],"names":["React","useState","useEffect","connect","useNavigate","toast","Button","Box","TextField","Container","Grid","Typography","Autocomplete","AddProject","props","projects","addProject","name","setName","type","setType","desc","setDesc","teamNeeded","setTeamNeeded","level","setLevel","location","setLocation","isEmpty","setIsEmpty","isError","setIsError","navigate","console","log","dark","handleSubmit","e","preventDefault","checkProjectNameExists","filter","project","warning","length","error","data","id","success","paddingTop","paddingBottom","marginTop","display","flexDirection","alignItems","fontFamily","color","fontWeight","fontSize","marginBottom","width","maxWidth","target","value","event","newValue","projectsType","params","cities","projectsTeam","projectsLevel","bgcolor","maxHeight","minWidth","minHeight","mt","mb","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useNavigate } from \"react-router\";\nimport { toast } from \"react-toastify\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\n\nconst AddProject = ({ projects, addProject }, props) => {\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    console.log(props.dark);\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter((project) =>\n      project.name === name ? project : null\n    );\n\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n\n    const data = {\n      id: projects.length > 0 ? projects[projects.length - 1].id + 1 : 0,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type,\n    };\n\n    addProject(data);\n    toast.success(\"Your Request sent successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return (\n    <>\n      <Container\n        component=\"main\"\n        maxWidth=\"xs\"\n        sx={{ paddingTop: \"40px\", paddingBottom: \"100px\" }}\n      >\n        <Box\n          sx={{\n            marginTop: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography\n            sx={{\n              fontFamily: \"Comfortaa\",\n              // color: props.dark ? \"#00468B\" : \"white\",\n              color: \"#00468B\",\n              fontWeight: \"800\",\n              fontSize: \"40px\",\n              marginBottom: \"30px\",\n            }}\n            component=\"h1\"\n            variant=\"h5\"\n          >\n            Add Project\n          </Typography>\n          <Box\n            onSubmit={(e) => {\n              if (isEmpty) {\n                e.preventDefault();\n                setIsEmpty(true);\n                setIsError(true);\n              } else {\n                setIsEmpty(false);\n              }\n            }}\n            sx={{\n              width: 500,\n              maxWidth: \"100%\",\n            }}\n          >\n            <form onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    variant=\"filled\"\n                    fullWidth\n                    label=\"Project name\"\n                    error={isError}\n                    required\n                    autoFocus\n                    onChange={(e) => {\n                      setName(e.target.value);\n                      if (name.length !== 0) {\n                        setIsEmpty(false);\n                      }\n                    }}\n                  />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    variant=\"filled\"\n                    fullWidth\n                    label=\"Project idea\"\n                    error={isError}\n                    required\n                    onChange={(e) => {\n                      setDesc(e.target.value);\n                      if (desc.length !== 0) {\n                        setIsEmpty(false);\n                      }\n                    }}\n                  />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                    value={type}\n                    onChange={(event, newValue) => {\n                      setType(newValue);\n                    }}\n                    options={projectsType}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Project type\"\n                        variant=\"filled\"\n                      />\n                    )}\n                  />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                    value={location}\n                    onChange={(event, newValue) => {\n                      setLocation(newValue);\n                    }}\n                    options={cities}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Where are from\"\n                        variant=\"filled\"\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                    disablePortal\n                    value={teamNeeded}\n                    onChange={(event, newValue) => {\n                      setTeamNeeded(newValue);\n                    }}\n                    options={projectsTeam}\n                    renderInput={(params) => (\n                      <TextField {...params} label=\"Number of teammates\" \n                    variant=\"filled\"\n\n                      />\n                    )}\n                  />\n                </Grid>\n\n                <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                    value={level}\n                    onChange={(event, newValue) => {\n                      setLevel(newValue);\n                    }}\n                    options={projectsLevel}\n                    renderInput={(params) => (\n                      <TextField {...params} label=\"Level of your project\" />\n                    )}\n                  />\n                </Grid>\n              </Grid>\n\n              <div className=\"form-group d-flex align-items-center justify-content-between my-2\">\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  sx={{\n                    \":hover\": {\n                      bgcolor: \"#e4a300\",\n                    },\n                    maxWidth: \"180px\",\n                    maxHeight: \"30px\",\n                    minWidth: \"180px\",\n                    minHeight: \"30px\",\n\n                    mt: 3,\n                    mb: 2,\n                    backgroundColor: \"#FFB703\",\n                  }}\n                >\n                  Add\n                </Button>\n\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  sx={{\n                    \":hover\": {\n                      bgcolor: \"#e4a300\",\n                    },\n                    maxWidth: \"180px\",\n                    maxHeight: \"30px\",\n                    minWidth: \"180px\",\n                    minHeight: \"30px\",\n                    mt: 3,\n                    mb: 2,\n                    backgroundColor: \"#FFB703\",\n                  }}\n                  onClick={() => navigate(\"/myprojects\")}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </Box>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  projects: state,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  addProject: (data) => {\n    dispatch({ type: \"ADD_PROJECT\", payload: data });\n  },\n});\n\nconst projectsType = [\n  \"Web Application\",\n  \"Android Application\",\n  \"IOS Application\",\n  \"Security System\",\n  \"UI\",\n  \"UX\",\n];\n\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\n\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\n\nconst cities = [\n  \"Riyadh\",\n  \"Jeddah\",\n  \"Mecca\",\n  \"Medina\",\n  \"Ad Dammam\",\n  \"Al Hufuf\",\n  \"Buraydah\",\n  \"Al Hillah\",\n  \"At Taif\",\n  \"Tabuk\",\n  \"Khamis Mushayt\",\n  \"Hail\",\n  \"Al Qatif\",\n  \"Al Mubarraz\",\n  \"Al Kharj\",\n  \"Najran\",\n  \"Yanbu‘\",\n  \"Abha\",\n  \"Arar\",\n  \"Jazan\",\n  \"Sakaka\",\n  \"Al Bahah\",\n];\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProject);\n"]},"metadata":{},"sourceType":"module"}