{"ast":null,"code":"var _jsxFileName = \"/Users/atheer/Desktop/Devteams/frontend/src/components/Pages/Projects/ProjectCRUD/UpdateProject/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { toast } from \"react-toastify\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Nav from \"../../../../Nav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UpdateProject = _ref => {\n  _s();\n\n  let {\n    projects,\n    updateProject\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const currentProject = projects.find(project => project.id === parseInt(id));\n  useEffect(() => {\n    setName(currentProject.name);\n    setType(currentProject.type);\n    setDesc(currentProject.desc);\n    setTeamNeeded(currentProject.teamNeeded);\n    setLevel(currentProject.level);\n    setLocation(currentProject.location);\n    console.log(name);\n  }, [currentProject]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter(project => project.name === name && project.id !== currentProject.id ? project : null);\n\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n\n    const data = {\n      id: currentProject.id,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type\n    };\n    updateProject(data);\n    toast.success(\"Project updated successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      sx: {\n        paddingTop: \"99px\",\n        paddingBottom: \"99px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginTop: 8,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontFamily: \"Comfortaa\",\n            color: \"#00468B\",\n            fontWeight: \"800\",\n            fontSize: \"40px\",\n            marginBottom: \"30px\"\n          },\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Update Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          onSubmit: e => {\n            if (isEmpty) {\n              e.preventDefault();\n              setIsEmpty(true);\n              setIsError(true);\n            } else {\n              setIsEmpty(false);\n            }\n          },\n          sx: {\n            width: 500,\n            maxWidth: \"100%\"\n          },\n          children: currentProject ? /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: name,\n                  fullWidth: true,\n                  label: \"Project name\",\n                  error: isError,\n                  required: true,\n                  autoFocus: true,\n                  onChange: e => {\n                    setName(e.target.value);\n\n                    if (name.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: desc,\n                  fullWidth: true,\n                  label: \"Project idea\",\n                  error: isError,\n                  required: true,\n                  onChange: e => {\n                    setDesc(e.target.value);\n\n                    if (desc.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: type,\n                  onChange: (event, newValue) => {\n                    setType(newValue);\n                  },\n                  options: projectsType,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Project type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: location,\n                  onChange: (event, newValue) => {\n                    setLocation(newValue);\n                  },\n                  options: cities,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    label: \"Where are from\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: teamNeeded,\n                  fullWidth: true,\n                  label: \"Number of teammates\",\n                  error: isError,\n                  required: true,\n                  onChange: e => {\n                    setTeamNeeded(e.target.value);\n\n                    if (teamNeeded.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: level,\n                  fullWidth: true,\n                  label: \"Level of your project\",\n                  error: isError,\n                  required: true,\n                  onChange: e => {\n                    setLevel(e.target.value);\n\n                    if (level.length !== 0) {\n                      setIsEmpty(false);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group d-flex align-items-center justify-content-between my-2\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                sx: {\n                  \":hover\": {\n                    bgcolor: \"#e4a300\"\n                  },\n                  maxWidth: \"180px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"180px\",\n                  minHeight: \"30px\",\n                  mt: 3,\n                  mb: 2,\n                  backgroundColor: \"#FFB703\"\n                },\n                onClick: () => navigate(\"/myprojects\"),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center\",\n            children: \"No Project Found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UpdateProject, \"+5tp608h2g4SUrLOo3qLvduAPaw=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = UpdateProject;\n\nconst mapStateToProps = state => ({\n  projects: state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateProject: data => {\n    dispatch({\n      type: \"UPDATE_PROJECT\",\n      payload: data\n    });\n  }\n});\n\nconst projectsType = [\"Web Application\", \"Android Application\", \"IOS Application\", \"Security System\", \"UI\", \"UX\"];\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\nconst cities = [\"Riyadh\", \"Jeddah\", \"Mecca\", \"Medina\", \"Ad Dammam\", \"Al Hufuf\", \"Buraydah\", \"Al Hillah\", \"At Taif\", \"Tabuk\", \"Khamis Mushayt\", \"Hail\", \"Al Qatif\", \"Al Mubarraz\", \"Al Kharj\", \"Najran\", \"Yanbu‘\", \"Abha\", \"Arar\", \"Jazan\", \"Sakaka\", \"Al Bahah\"];\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProject);\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProject\");","map":{"version":3,"sources":["/Users/atheer/Desktop/Devteams/frontend/src/components/Pages/Projects/ProjectCRUD/UpdateProject/index.js"],"names":["React","useEffect","useState","connect","useNavigate","useParams","toast","Button","Box","TextField","Container","Grid","Typography","Autocomplete","Nav","UpdateProject","projects","updateProject","name","setName","type","setType","desc","setDesc","teamNeeded","setTeamNeeded","level","setLevel","location","setLocation","isEmpty","setIsEmpty","isError","setIsError","id","navigate","currentProject","find","project","parseInt","console","log","handleSubmit","e","preventDefault","checkProjectNameExists","filter","warning","length","error","data","success","paddingTop","paddingBottom","marginTop","display","flexDirection","alignItems","fontFamily","color","fontWeight","fontSize","marginBottom","width","maxWidth","target","value","event","newValue","projectsType","params","cities","bgcolor","maxHeight","minWidth","minHeight","mt","mb","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch","payload","projectsTeam","projectsLevel"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { toast } from \"react-toastify\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\n\n\nimport Nav from \"../../../../Nav\";\nconst UpdateProject = ({ projects, updateProject }) => {\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [teamNeeded, setTeamNeeded] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const currentProject = projects.find(\n    (project) => project.id === parseInt(id)\n  );\n\n  useEffect(() => {\n    setName(currentProject.name);\n    setType(currentProject.type);\n    setDesc(currentProject.desc);\n    setTeamNeeded(currentProject.teamNeeded);\n    setLevel(currentProject.level);\n    setLocation(currentProject.location);\n    console.log(name);\n  }, [currentProject]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const checkProjectNameExists = projects.filter((project) =>\n      project.name === name && project.id !== currentProject.id ? project : null\n    );\n\n    if (!type || !name || !desc || !teamNeeded || !level || !location) {\n      return toast.warning(\"Please fill in all fields!!\");\n    }\n    if (checkProjectNameExists.length > 0) {\n      return toast.error(\"This project name already exists!!\");\n    }\n\n    const data = {\n      id: currentProject.id,\n      desc,\n      name,\n      level,\n      teamNeeded,\n      location,\n      type,\n    };\n\n    updateProject(data);\n    toast.success(\"Project updated successfully!!\");\n    navigate(\"/myprojects\");\n  };\n\n  return (\n    <>\n      <Nav />\n\n      <Container\n        component=\"main\"\n        maxWidth=\"xs\"\n        sx={{ paddingTop: \"99px\", paddingBottom: \"99px\" }}\n      >\n        <Box\n          sx={{\n            marginTop: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography\n            sx={{\n              fontFamily: \"Comfortaa\",\n              color: \"#00468B\",\n              fontWeight: \"800\",\n              fontSize: \"40px\",\n              marginBottom: \"30px\",\n            }}\n            component=\"h1\"\n            variant=\"h5\"\n          >\n            Update Project\n          </Typography>\n          <Box\n            onSubmit={(e) => {\n              if (isEmpty) {\n                e.preventDefault();\n                setIsEmpty(true);\n                setIsError(true);\n              } else {\n                setIsEmpty(false);\n              }\n            }}\n            sx={{\n              width: 500,\n              maxWidth: \"100%\",\n            }}\n          >\n            {currentProject ? (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      value={name}\n                      fullWidth\n                      label=\"Project name\"\n                      error={isError}\n                      required\n                      autoFocus\n                      onChange={(e) => {\n                        setName(e.target.value);\n                        if (name.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      value={desc}\n                      fullWidth\n                      label=\"Project idea\"\n                      error={isError}\n                      required\n                      onChange={(e) => {\n                        setDesc(e.target.value);\n                        if (desc.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    />\n                  </Grid>\n\n                  {/* <Grid item xs={12} sm={12}>\n                    <TextField\n                      value={type}\n                      fullWidth\n                      label=\"Project type\"\n                      error={isError}\n                      required\n                      onChange={(e) => {\n                        setType(e.target.value);\n                        if (type.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    />\n                  </Grid> */}\n                  <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                    value={type}\n                    onChange={(event, newValue) => {\n                      setType(newValue);\n                    }}\n                    options={projectsType}\n                    renderInput={(params) => (\n                      <TextField {...params} label=\"Project type\" />\n                    )}\n                  />\n                </Grid>\n\n\n                  <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                    value={location}\n                    onChange={(event, newValue) => {\n                      setLocation(newValue);\n                    }}\n                    options={cities}\n                    renderInput={(params) => (\n                      <TextField {...params} label=\"Where are from\" />\n                    )}\n                  />\n                    {/* <TextField\n                      value={location}\n                      fullWidth\n                      label=\"Where are from\"\n                      error={isError}\n                      required\n                      onChange={(e) => {\n                        setLocation(e.target.value);\n                        if (location.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    /> */}\n                  </Grid>\n\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      value={teamNeeded}\n                      fullWidth\n                      label=\"Number of teammates\"\n                      error={isError}\n                      required\n                      onChange={(e) => {\n                        setTeamNeeded(e.target.value);\n                        if (teamNeeded.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      value={level}\n                      fullWidth\n                      label=\"Level of your project\"\n                      error={isError}\n                      required\n                      onChange={(e) => {\n                        setLevel(e.target.value);\n                        if (level.length !== 0) {\n                          setIsEmpty(false);\n                        }\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n                <div className=\"form-group d-flex align-items-center justify-content-between my-2\">\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{\n                      \":hover\": {\n                        bgcolor: \"#e4a300\",\n                      },\n                      maxWidth: \"180px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"180px\",\n                      minHeight: \"30px\",\n\n                      mt: 3,\n                      mb: 2,\n                      backgroundColor: \"#FFB703\",\n                    }}\n                  >\n                    Update\n                  </Button>\n\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{\n                      \":hover\": {\n                        bgcolor: \"#e4a300\",\n                      },\n                      maxWidth: \"180px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"180px\",\n                      minHeight: \"30px\",\n                      mt: 3,\n                      mb: 2,\n                      backgroundColor: \"#FFB703\",\n                    }}\n                    onClick={() => navigate(\"/myprojects\")}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            ) : (\n              <h1 className=\"text-center\">No Project Found</h1>\n            )}\n          </Box>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  projects: state,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  updateProject: (data) => {\n    dispatch({ type: \"UPDATE_PROJECT\", payload: data });\n  },\n});\n\nconst projectsType = [\n  \"Web Application\",\n  \"Android Application\",\n  \"IOS Application\",\n  \"Security System\",\n  \"UI\",\n  \"UX\",\n];\n\nconst projectsTeam = [1, 2, 3, 4, 5, 6];\n\nconst projectsLevel = [\"Guru\", \"Advanced\", \"Intermediate\", \"Junior\", \"Newbie\"];\n\nconst cities = [\n  \"Riyadh\",\n  \"Jeddah\",\n  \"Mecca\",\n  \"Medina\",\n  \"Ad Dammam\",\n  \"Al Hufuf\",\n  \"Buraydah\",\n  \"Al Hillah\",\n  \"At Taif\",\n  \"Tabuk\",\n  \"Khamis Mushayt\",\n  \"Hail\",\n  \"Al Qatif\",\n  \"Al Mubarraz\",\n  \"Al Kharj\",\n  \"Najran\",\n  \"Yanbu‘\",\n  \"Abha\",\n  \"Arar\",\n  \"Jazan\",\n  \"Sakaka\",\n  \"Al Bahah\",\n];\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProject);\n"]},"metadata":{},"sourceType":"module"}